AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template to set up QuickSight namespace, groups, and users using Lambda, referencing an existing IAM policy.

Resources:
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: 'Allow'
            Principal: 
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies: 
        - PolicyName: 'LambdaQuickSightPolicy'
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - Effect: 'Allow'
                Action: 
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'quicksight:CreateNamespace'
                  - 'quicksight:CreateGroup'
                  - 'quicksight:RegisterUser'
                  - 'quicksight:CreateGroupMembership'
                Resource: '*'
              - Effect: 'Allow'
                Action: 
                  - 'iam:AttachUserPolicy'
                Resource: 
                  - 'arn:aws:iam::*:policy/QuickSightCustomPolicy'
              - Effect: 'Allow'
                Action:
                  - 'quicksight:DescribeNamespace'
                  - 'quicksight:ListNamespaces'
                  - 'quicksight:DescribeGroup'
                  - 'quicksight:ListGroups'
                  - 'quicksight:DescribeUser'
                  - 'quicksight:ListUsers'
                Resource: '*'

  QuickSightLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: 'index.lambda_handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          quicksight = boto3.client('quicksight')
          iam = boto3.client('iam')

          def lambda_handler(event, context):
              aws_account_id = event['AwsAccountId']
              namespace = event['Namespace']
              group_name = event['GroupName']
              users = event['Users']
              policy_arn = event['PolicyArn']

              def create_namespace():
                  try:
                      response = quicksight.create_namespace(
                          AwsAccountId=aws_account_id,
                          Namespace=namespace,
                          IdentityStore='QUICKSIGHT'
                      )
                      logger.info('Namespace creation successful: %s', response)
                      return response['Arn']
                  except quicksight.exceptions.ResourceExistsException as e:
                      logger.warning('Namespace already exists: %s', e)
                  except Exception as e:
                      logger.error('An error occurred: %s', e)

              def create_group():
                  try:
                      response = quicksight.create_group(
                          GroupName=group_name,
                          AwsAccountId=aws_account_id,
                          Namespace=namespace
                      )
                      logger.info('Group creation successful: %s', response)
                      return response['Group']
                  except quicksight.exceptions.ResourceExistsException as e:
                      logger.warning('Group already exists: %s', e)
                  except Exception as e:
                      logger.error('An error occurred: %s', e)

              def create_user(user_name, email, role='AUTHOR'):
                  try:
                      response = quicksight.register_user(
                          IdentityType='QUICKSIGHT',
                          Email=email,
                          UserRole=role,
                          AwsAccountId=aws_account_id,
                          Namespace=namespace,
                          UserName=user_name
                      )
                      logger.info('User creation successful: %s', response)
                      return response['User']
                  except quicksight.exceptions.ResourceExistsException as e:
                      logger.warning('User already exists: %s', e)
                  except Exception as e:
                      logger.error('An error occurred: %s', e)

              def add_user_to_group(user_name):
                  try:
                      response = quicksight.create_group_membership(
                          MemberName=user_name,
                          GroupName=group_name,
                          AwsAccountId=aws_account_id,
                          Namespace=namespace
                      )
                      logger.info('Added user to group: %s', response)
                  except Exception as e:
                      logger.error('An error occurred: %s', e)

              def attach_policy(user_name, policy_arn):
                  try:
                      response = iam.attach_user_policy(
                          UserName=user_name,
                          PolicyArn=policy_arn
                      )
                      logger.info('Policy attached to user: %s', response)
                  except Exception as e:
                      logger.error('An error occurred: %s', e)

              # Create Namespace
              create_namespace()

              # Create Group
              create_group()

              # Create Users, add them to the group, and attach policies
              for user in users:
                  create_user(user['user_name'], user['email'], user['role'])
                  add_user_to_group(user['user_name'])
                  attach_policy(user['user_name'], policy_arn)

              return {
                  'statusCode': 200,
                  'body': json.dumps('QuickSight setup completed successfully')
              }

  QuickSightSetupInvoke:
    Type: 'Custom::InvokeLambda'
    Properties:
      ServiceToken: !GetAtt QuickSightLambdaFunction.Arn
      AwsAccountId: !Ref 'AWS::AccountId'
      Namespace: 'mynamespace'
      GroupName: 'mygroup'
      Users:
        - UserName: 'user1'
          Email: 'user1@example.com'
          Role: 'AUTHOR'
        - UserName: 'user2'
          Email: 'user2@example.com'
          Role: 'AUTHOR'
        - UserName: 'user3'
          Email: 'user3@example.com'
          Role: 'AUTHOR'
      PolicyArn: 'arn:aws:iam::<aws_account_id>:policy/QuickSightCustomPolicy' # Replace with your actual policy ARN

Outputs:
  LambdaExecutionRoleArn:
    Description: 'ARN of the Lambda Execution Role'
    Value: !GetAtt LambdaExecutionRole.Arn
  QuickSightLambdaFunctionArn:
    Description: 'ARN of the QuickSight Setup Lambda Function'
    Value: !GetAtt QuickSightLambdaFunction.Arn
