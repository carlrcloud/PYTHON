AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template to set up QuickSight namespace, groups, and users using Lambda, referencing an existing IAM policy.

Resources:
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: 'Allow'
            Principal: 
              Service: 
                - 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies: 
        - PolicyName: 'LambdaQuickSightPolicy'
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - Effect: 'Allow'
                Action: 
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'quicksight:CreateNamespace'
                  - 'quicksight:CreateGroup'
                  - 'quicksight:RegisterUser'
                  - 'quicksight:CreateGroupMembership'
                  - 'quicksight:CreateIAMPolicyAssignment'
                  - 'quicksight:DescribeNamespace'
                  - 'quicksight:ListNamespaces'
                  - 'quicksight:DescribeGroup'
                  - 'quicksight:ListGroups'
                  - 'quicksight:DescribeUser'
                  - 'quicksight:ListUsers'
                Resource: '*'
              - Effect: 'Allow'
                Action: 
                  - 'iam:AttachUserPolicy'
                Resource: 
                  - 'arn:aws:iam::*:policy/QuickSightCustomPolicy'

  QuickSightLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: 'index.lambda_handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import logging
          import cfnresponse

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          quicksight = boto3.client('quicksight')
          iam = boto3.client('iam')

          def lambda_handler(event, context):
              response_data = {}
              try:
                  request_type = event['RequestType']
                  aws_account_id = event['ResourceProperties']['AwsAccountId']
                  namespace = event['ResourceProperties']['Namespace']
                  group_name = event['ResourceProperties']['GroupName']
                  users = event['ResourceProperties']['Users']
                  policy_arn = event['ResourceProperties']['PolicyArn']

                  if request_type == 'Create':
                      def create_namespace():
                          try:
                              response = quicksight.create_namespace(
                                  AwsAccountId=aws_account_id,
                                  Namespace=namespace,
                                  IdentityStore='QUICKSIGHT'
                              )
                              logger.info('Namespace creation successful: %s', response)
                              return response['Arn']
                          except quicksight.exceptions.ResourceExistsException as e:
                              logger.warning('Namespace already exists: %s', e)
                          except Exception as e:
                              logger.error('An error occurred: %s', e)
                              raise e

                      def create_group():
                          try:
                              response = quicksight.create_group(
                                  GroupName=group_name,
                                  AwsAccountId=aws_account_id,
                                  Namespace=namespace
                              )
                              logger.info('Group creation successful: %s', response)
                              return response['Group']
                          except quicksight.exceptions.ResourceExistsException as e:
                              logger.warning('Group already exists: %s', e)
                          except Exception as e:
                              logger.error('An error occurred: %s', e)
                              raise e

                      def create_user(user_name, email, role='AUTHOR'):
                          try:
                              response = quicksight.register_user(
                                  IdentityType='QUICKSIGHT',
                                  Email=email,
                                  UserRole=role,
                                  AwsAccountId=aws_account_id,
                                  Namespace=namespace,
                                  UserName=user_name
                              )
                              logger.info('User creation successful: %s', response)
                              return response['User']
                          except quicksight.exceptions.ResourceExistsException as e:
                              logger.warning('User already exists: %s', e)
                          except Exception as e:
                              logger.error('An error occurred: %s', e)
                              raise e

                      def add_user_to_group(user_name):
                          try:
                              response = quicksight.create_group_membership(
                                  MemberName=user_name,
                                  GroupName=group_name,
                                  AwsAccountId=aws_account_id,
                                  Namespace=namespace
                              )
                              logger.info('Added user to group: %s', response)
                          except Exception as e:
                              logger.error('An error occurred: %s', e)
                              raise e

                      def create_iam_policy_assignment(user_name):
                          try:
                              response = quicksight.create_iam_policy_assignment(
                                  AwsAccountId=aws_account_id,
                                  AssignmentName=f'{user_name}_PolicyAssignment',
                                  AssignmentStatus='ENABLED',
                                  PolicyArn=policy_arn,
                                  Identities={
                                      'USER': [user_name]
                                  },
                                  Namespace=namespace
                              )
                              logger.info('IAM Policy Assignment creation successful: %s', response)
                          except Exception as e:
                              logger.error('An error occurred while creating IAM Policy Assignment: %s', e)
                              raise e

                      # Create Namespace
                      create_namespace()

                      # Create Group
                      create_group()

                      # Create Users, add them to the group, and create IAM policy assignments
                      for user in users:
                          create_user(user['user_name'], user['email'], user['role'])
                          add_user_to_group(user['user_name'])
                          create_iam_policy_assignment(user['user_name'])

                  elif request_type == 'Update':
                      # Handle updates here if needed
                      logger.info('Update request received')
                      # No specific update logic for this example

                  elif request_type == 'Delete':
                      # Handle deletes here if needed
                      logger.info('Delete request received')
                      # No specific delete logic for this example

                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, "CustomResourcePhysicalID")
              except Exception as e:
                  logger.error('Error processing request: %s', str(e))
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data, "CustomResourcePhysicalID")

  QuickSightSetupInvoke:
    Type: 'Custom::Resource'
    Properties:
      ServiceToken: !GetAtt QuickSightLambdaFunction.Arn
      AwsAccountId: !Ref 'AWS::AccountId'
      Namespace: 'mynamespace'
      GroupName: 'mygroup'
      Users:
        - UserName: 'user1'
          Email: 'user1@example.com'
          Role: 'AUTHOR'
        - UserName: 'user2'
          Email: 'user2@example.com'
          Role: 'AUTHOR'
        - UserName: 'user3'
          Email: 'user3@example.com'
          Role: 'AUTHOR'
      PolicyArn: 'arn:aws:iam::<aws_account_id>:policy/QuickSightCustomPolicy' # Replace with your actual policy ARN

Outputs:
  LambdaExecutionRoleArn:
    Description: 'ARN of the Lambda Execution Role'
    Value: !GetAtt LambdaExecutionRole.Arn
  QuickSightLambdaFunctionArn:
    Description: 'ARN of the QuickSight Setup Lambda Function'
    Value: !GetAtt QuickSightLambdaFunction.Arn
